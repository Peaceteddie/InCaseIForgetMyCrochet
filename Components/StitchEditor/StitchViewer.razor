@using InCaseIForgetMyCrochet.Models;
@using InCaseIForgetMyCrochet.Shared;
@using Microsoft.EntityFrameworkCore

@namespace InCaseIForgetMyCrochet.Components.StitchEditor

@if (Pattern is not null)
{
    <table class="gap-3 my-3 w-100" style="user-select:none;">
        @foreach (Row row in Pattern.Rows.OrderBy(r => r.Index))
        {
            <tr class="d-flex w-100">
                <ul>
                    <td class="col-1">
                        <button class="btn btn-danger" type="button" style="padding:.5rem 1rem;"
                            @onclick="@(async () => await RemoveRow(row))">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                    <div id="@(row.Index)" class="d-flex flex-column w-100" style="position:relative;" row-context>
                        <SortableList Id="@($"{row.Id}-stitch-row")" Items="row.Instructions" Context="instruction"
                            OnAdd="async args => await InsertInstruction(row, args.newIndex, args.type)"
                            OnRemove="async args => await RemoveInstruction(row, args.oldIndex, args.id)"
                            OnUpdate="async args => await UpdateInstruction(row, args.oldIndex, args.newIndex)">
                            <SortableItemTemplate>
                                <td class="d-flex flex-row justify-content-center" style="position:relative;"
                                    key="@instruction.Id">
                                    <button class="btn-danger"
                                        style="cursor:pointer;height:2rem;width:2rem;position:absolute;bottom:50%;left:50%;z-index:0;"
                                        @onclick="@(async() => await RemoveInstruction(row, instruction.Index))">
                                        <i class="bi bi-trash" />
                                    </button>
                                    <span class="center-all d-flex rounded-pill"
                                        @onclick="@(() => selectedInstruction = instruction)"
                                        style="background:@(instruction.StitchType.ToPastelColor());cursor:pointer;height:2.5rem;width:2.5rem;z-index:1;">
                                        @instruction.StitchType
                                    </span>
                                    @if (selectedInstruction?.Equals(instruction) ?? false)
                                    {
                                        @foreach ((StitchTypeAbbreviation type, int index) option in StitchTypesWithIndex)
                                        {
                                            <div @onclick="@(() => selectedInstruction= null)"
                                                style="position:fixed;height:100vh;width:100vw;">
                                            </div>
                                            <span class="center-all d-flex rounded-pill"
                                                @onclick="@(() => ChangeStitchType(option.type, instruction))"
                                                style="background:@(option.type.ToPastelColor());cursor:pointer;height:2.5rem;width:2.5rem;@GetButtonStyle(option.index, amountOfStitchTypes)">
                                                @option.type
                                            </span>
                                        }
                                    }
                                </td>
                            </SortableItemTemplate>
                        </SortableList>
                        <div class="input-group">
                            @{
                                string height = "2rem";
                            }
                            <input type="text" class="form-control" disabled="@(selectedRowNotes != row.Id)"
                                placeholder="Description" @bind-value="row.Notes"
                                @bind-value:after="@(async () => await Pattern.SaveChangesAsync(Context))"
                                style="@($"height:{height};")" />
                            <button class=" input-group-text" type="button" style="@($"height:{height};")"
                                @onclick="@(()=> selectedRowNotes = selectedRowNotes == row.Id ? null : row.Id)">
                                @if (selectedRowNotes == row.Id)
                                {
                                    <i class="bi bi-unlock"></i>
                                }
                                else
                                {
                                    <i class="bi bi-lock"></i>

                                }
                            </button>
                        </div>
                    </div>
                    <td class="col-1">
                        <button class="btn btn-info text-nowrap" @onclick="@(async () => await AddStitchBundle(row))">
                            @StitchAmount @StitchType
                        </button>
                    </td>
                </ul>
            </tr>
        }
    </table>
}
