@page "/"
@using InCaseIForgetMyCrochet
@using InCaseIForgetMyCrochet.Models
@using InCaseIForgetMyCrochet.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Web
@inject PatternService patternService

@implements IDisposable
@rendermode InteractiveServer

<div class="container d-flex flex-column gap-5">
    <h1>Home</h1>
    <div class="d-flex gap-5">
        <ul class="list-group">
            @if (patterns != null)
            {
                @foreach (var pattern in patterns)
                {
                    <li class="list-group-item" style="width:15vw;">
                        <button class="btn btn-primary w-100" @onclick="@(() => {this.pattern = pattern; StateHasChanged();})">
                            <h4>@pattern.Name</h4>
                        </button>
                    </li>
                }
                <button class="btn btn-primary w-100"
                    @onclick="@(() => {this.pattern = new Pattern { Name = "" }; StateHasChanged();})">
                    <h4>New Pattern</h4>
                </button>
            }
        </ul>
        @if (pattern != null)
        {
            <EditForm class="container h-100" Model="@pattern" OnFieldChanged="HandleFieldChanged">
                <StitchEditor Pattern="@pattern" />
            </EditForm>
        }
    </div>
</div>
@code {
    Pattern? pattern { get; set; } = null;
    List<Pattern>? patterns { get; set; }
    int amountStitches { get; set; } = 1;
    Timer? saveTimer;

    protected override async Task OnInitializedAsync()
    {
    @inject PatternService patternService
        patterns = await patternService.GetPatternsAsync();

        saveTimer = new Timer(async _ =>
        {
            if (pattern is not null)
                await patternService.SaveChangesAsync();
        }, null, 0, 5000);
    }

    private void HandleFieldChanged(FieldChangedEventArgs e)
    {
        if (pattern is not null)
            patternService.HandleFieldChanged(pattern);
    }

    public void Dispose()
    {
        saveTimer?.Dispose();
        using var context = new PatternDbContext();
        context.SaveChanges();
    }
}
<style>
    button {
        border-radius: 1rem;
        padding: 0.1rem 1rem;
    }

    #typeStitches {
        align-self: center;
        min-width: 50%;
        width: 70%;
        max-width: 100%;
    }
</style>