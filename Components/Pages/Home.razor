@page "/"
@using InCaseIForgetMyCrochet
@using InCaseIForgetMyCrochet.Components.StitchEditor
@using InCaseIForgetMyCrochet.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Web
@inject PatternDbContext context

@rendermode InteractiveServer

<div class="container d-flex flex-column gap-5">
    <h1>Home</h1>
    <div class="d-flex gap-5">
        <ul class="list-group">
            @if (patterns != null)
            {
                @foreach (var pattern in patterns)
                {
                            <li class="list-group-item" style="width:15vw;">
                                <button class="btn btn-primary w-100" @onclick="@(() => {this.pattern = pattern; StateHasChanged();})">
                                    <h4>@pattern.Name</h4>
                                </button>
                            </li>
                }
                    <button class="btn btn-primary w-100"
                        @onclick="@(() => {this.pattern = new Pattern { Name = "" }; StateHasChanged();})">
                        <h4>New Pattern</h4>
                    </button>
            }
        </ul>
        @if (pattern != null)
        {
                <EditForm class="container h-100" Model="@pattern" EditContext.OnFieldChanged="HandleFieldChanged">
                    <StitchEditor Pattern="@pattern" />
                </EditForm>
        }
    </div>
</div>
@code {
    Pattern? pattern { get; set; } = null;
    List<Pattern>? patterns { get; set; }
    int amountStitches { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        patterns = await context.Patterns.Include(p=>p.Rows).ThenInclude(r => r.Instructions).ToListAsync();
    }

    private void HandleFieldChanged(FieldChangedEventArgs e)
    {
        if (pattern is not null)
        {
            context.Update(pattern);
            context.SaveChanges();
        }
    }
}