@page "/"
@using InCaseIForgetMyCrochet
@using InCaseIForgetMyCrochet.Components.StitchEditor
@using InCaseIForgetMyCrochet.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using static Extensions

@using ToolbarParams = (int? amount, InCaseIForgetMyCrochet.Models.StitchTypeAbbreviation? type);

@inject PatternDbContext Context
@rendermode InteractiveServer


<div class="d-flex flex-column gap-5 p-5">
    <div class="d-flex justify-content-between">
        @if (User?.Identity?.IsAuthenticated == true)
        {
            <h1>Welcome Home @User.Identity.Name</h1>
            <a href="/account/logout">Logout <i class="bi bi-box-arrow-in-right"></i></a>
        }
        else
        {
            <h1>Welcome Home Stranger</h1>
            <a href="/account/login"><i class="bi bi-box-arrow-in-left"></i> Login</a>
        }
    </div>
    <div class="d-flex gap-5 w-100">
        <ul class="col-3 list-group">
            @if (Patterns != null)
            {
                @foreach (var pattern in Patterns)
                {
                    <li class="d-flex flex-row list-group-item w-100">
                        <button class="btn btn-danger col-2" @onclick="()=>DeletePattern(pattern)">
                            <i class="bi bi-trash"></i>
                        </button>
                        <button class="btn btn-primary col-10" @onclick="() => SelectPattern(pattern)">
                            <h4>@pattern.Name</h4>
                        </button>
                    </li>
                }
                <button class="btn btn-primary w-100" @onclick="NewPattern">
                    <h4>New Pattern</h4>
                </button>
            }
        </ul>
        <div class="col-8 d-flex">
            @if (Pattern != null)
            {
                <EditForm id="stitch-editor" class="container h-100" Model="@Pattern">
                    <StitchToolbar IJustDragged="() => FromToolbar = true" Pattern="@Pattern"
                        Refresh="@((args) => RefreshEvent!(args))" StitchAmount="@stitchAmount" StitchType="@stitchType" />
                    <div class="d-flex justify-content-between">
                        <button class="my-3 py-2 w-50" @onclick="AddRow">
                            Add Row
                        </button>
                        <div class="d-flex flex-row justify-content-between">
                            <button class="my-3 p-2" @onclick="MirrorPatternUp">
                                Mirror Pattern Up ⬆️
                            </button>
                            <button class="my-3 p-2" @onclick="MirrorPatternDown">
                                Mirror Pattern Down ⬇️
                            </button>
                        </div>
                    </div>
                    <StitchViewer FromToolbar="@FromToolbar" Pattern="@Pattern" StitchAmount="@stitchAmount"
                        StitchType="@stitchType" />
                </EditForm>
            }
        </div>
    </div>
</div>

@code {
    [CascadingParameter] Task<AuthenticationState>? Auth { get; set; }
    ClaimsPrincipal? User => (Auth?.Result)?.User;

    Pattern? Pattern { get; set; }
    List<Pattern>? Patterns { get; set; }
    bool FromToolbar { get; set; } = false;
    event Action<ToolbarParams>? RefreshEvent;

    int stitchAmount { get; set; } = 1;
    StitchTypeAbbreviation stitchType { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Patterns = await Context.Patterns
        .AsTracking()
        .Include(p => p.Rows.OrderBy(r => r.Index))
        .ThenInclude(r => r.Instructions.OrderBy(i => i.Index))
        .ToListAsync();

        RefreshEvent += Refresh;
    }

    private async Task NewPattern()
    {
        if (Patterns is null) return;
        Pattern = new Pattern();
        Patterns.Add(Pattern);
        await Context.SaveChangesAsync();
        StateHasChanged();
    }
    private void Refresh(ToolbarParams Params = default)
    {
        var (stitchAmount, stitchType) = Params;
        this.stitchAmount = stitchAmount ?? this.stitchAmount;
        this.stitchType = stitchType ?? this.stitchType;
        StateHasChanged();
    }
    private void SelectPattern(Pattern pattern)
    => Pattern = pattern;
    private void SetupIndices()
    {
        if (Pattern is null) return;
        Pattern.Rows.ForEach(row => row.Index = Pattern.Rows.IndexOf(row));
        Pattern.Rows.ForEach(row => row.Instructions.ForEach(instruction => instruction.Index =
        row.Instructions.IndexOf(instruction)));
    }

    private async Task AddRow()
    {
        if (Pattern is null) return;
        Pattern.Rows = Pattern.Rows.Prepend<Row>(new()).ToList();
        SetupIndices();
        await Pattern.SaveChangesAsync(Context);
        StateHasChanged();
    }
    private async Task DeletePattern(Pattern pattern)
    {
        if (Patterns is null) return;
        Patterns.Remove(pattern);
        await pattern.DeleteAsync(Context);
        StateHasChanged();
    }
    private async Task MirrorPatternUp()
    {
        if (Pattern is null) return;
        var reverse = Pattern.Rows.Select(r => r.Clone()).Reverse();
        Pattern.Rows.InsertRange(0, reverse);
        SetupIndices();
        await Pattern.SaveChangesAsync(Context);
        StateHasChanged();
    }
    private async Task MirrorPatternDown()
    {
        if (Pattern is null) return;
        var reverse = Pattern.Rows.Select(r => r.Clone()).Reverse();
        Pattern.Rows.AddRange(reverse);
        SetupIndices();
        await Pattern.SaveChangesAsync(Context);
        StateHasChanged();
    }
}

<style>
    form {

        .btn,
        button {
            border-radius: 10rem;
            display: flex;
            place-content: center;
            place-items: center;
            place-self: center;
        }

        input:last-child {
            border-top-right-radius: 10rem;
            border-bottom-right-radius: 10rem;
        }

        label:first-child {
            background: #60f2;
            border-top-left-radius: 10rem;
            border-bottom-left-radius: 10rem;
        }

        label:last-child {
            background: #60f2;
            border-top-right-radius: 10rem;
            border-bottom-right-radius: 10rem;
        }

        #add-single-toolbar {
            display: flex;
            flex: 1 1 auto;

            & * {
                display: flex;
                flex: 1 1 auto;
            }
        }

        #add-multiple-toolbar {
            display: flex;
            flex: 1 1 auto;

            & * {
                display: flex;
                flex: 1 1 auto;
            }
        }

        * {
            margin: 0;
            padding: 0;
        }

        table {
            display: flex;
            flex: 1 1 auto;
            flex-direction: column;
        }

        tr {
            border-bottom: 1px solid black;
            display: flex;
            flex: 1 1 auto;
            flex-direction: row;
        }

        ul {
            display: flex;
            flex: 1 1 auto;
            flex-direction: row;
            margin: 0;
            padding: 0;
        }

        td {
            display: flex;
            flex: 1 1 auto;
            flex-direction: column;
            margin: auto !important;

            & button {
                padding: 0.3rem 0.6rem;
            }
        }
    }
</style>
