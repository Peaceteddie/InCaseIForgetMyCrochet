@page "/"
@using InCaseIForgetMyCrochet
@using InCaseIForgetMyCrochet.Models
@using InCaseIForgetMyCrochet.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Web
@inject PatternService patternService

@implements IDisposable
@rendermode InteractiveServer

<div class="container d-flex flex-column gap-5">
    <h1>Home</h1>
    <div class="d-flex gap-5">
        <ul class="list-group">
            @if (patterns != null)
            {
                @foreach (var pattern in patterns)
                {
                    <li class="list-group-item" style="width:15vw;">
                        <button class="btn btn-primary w-100" @onclick="@(() => {this.pattern = pattern; StateHasChanged();})">
                            <h4>@pattern.Name</h4>
                        </button>
                    </li>
                }
            }
        </ul>
        @if (pattern != null)
        {
            <EditForm class="container" Model="@pattern" OnFieldChanged="HandleFieldChanged">
                <h2>@pattern.Name</h2>
                <ul class="list-group">
                    @foreach (var row in pattern.Rows)
                    {
                        <li class="list-group-item">
                            <ul class="list-group">
                                @foreach (var instruction in row.Instructions)
                                {
                                    <div class="list-group-item" style="display: flex; justify-content: space-between;">
                                        <InputNumber @bind-Value="instruction.StitchCount" class="form-control" />
                                        <InputSelect @bind-Value="instruction.StitchType" class="form-control">
                                            @foreach (var stitch in Enum.GetValues<StitchTypeAbbreviation>())
                                            {
                                                <option value="@stitch">@stitch</option>
                                            }
                                        </InputSelect>
                                        <button class="btn btn-danger" @onclick="@(() => row.Instructions.Remove(instruction))"
                                            @onkeyup="@(e => {if (e.Key == "Enter") { return; }})">Remove</button>
                                    </div>
                                } @* End of Instructions *@
                                <label for="amountStitches">Amount of Stitches</label>
                                <InputNumber id="amountStitches" @bind-Value="amountStitches" class="form-control"
                                    @onkeyup="@(e => {if (e.Key == "Enter") { return; }} )" />
                                <label for="typeStitches">Type of Stitches</label>
                                <div class="d-flex flex-wrap gap-1 justify-content-center" id="typeStitches">
                                    @foreach (var stitch in Enum.GetValues<StitchTypeAbbreviation>())
                                    {
                                        <button class="btn btn-primary"
                                            @onclick="@(() => row.Instructions.Add(new Instruction { StitchCount = amountStitches, StitchType = stitch }))">@stitch</button>
                                    }
                                </div>
                            </ul>
                            <button class="btn btn-danger" @onclick="@(() => pattern.Rows.Remove(row))">Remove Row</button>
                        </li>
                    } @* End of Rows *@
                    <button class=" btn btn-primary col-2"
                        @onclick="() => pattern.Rows.Add(new Row { Instructions = new List<Instruction>() })">Add
                        Row</button>
                </ul>
            </EditForm>
        }
    </div>
</div>
@code {
    Pattern? pattern { get; set; } = null;
    List<Pattern>? patterns { get; set; }
    int amountStitches { get; set; } = 1;
    Timer? saveTimer;

    protected override async Task OnInitializedAsync()
    {
    @inject PatternService patternService
        patterns = await patternService.GetPatternsAsync();

        saveTimer = new Timer(async _ =>
        {
            if (pattern is not null)
                await patternService.SaveChangesAsync();
        }, null, 0, 5000);
    }

    private void HandleFieldChanged(FieldChangedEventArgs e)
    {
        if (pattern is not null)
            patternService.HandleFieldChanged(pattern);
    }

    public void Dispose()
    {
        saveTimer?.Dispose();
        using var context = new PatternDbContext();
        context.SaveChanges();
    }
}
<style>
    button {
        border-radius: 1rem;
        padding: 0.1rem 1rem;
    }

    #typeStitches {
        align-self: center;
        min-width: 50%;
        width: 70%;
        max-width: 100%;
    }
</style>